#!/usr/bin/env ruby

require_relative '../lib/pandata'
require_relative '../lib/pandata/argv_parser'
require_relative '../lib/pandata/data_formatter'

options = Pandata::ArgvParser.parse(ARGV)

output_file = options[:output_file]
if output_file
  File.delete(output_file) if File.exists?(output_file)

  Object.send(:define_method, :write) do |string|
    File.open(output_file, 'a') do |file|
      file.puts string
    end
  end
else
  def write(string)
    puts string
  end
end

if ARGV.empty?
  # Print command-line usage help.
  puts options[:opts]
  exit
end

scraper = Pandata::Scraper.get(options[:user_id])
formatter = Pandata::DataFormatter.new

# If scraper is an array, a Pandora user could not be found with certainty.
# In this case, scraper will contain webnames similar to options[:user_id].
if scraper.kind_of?(Array)
  puts "No exact match for '#{options[:user_id]}'."

  unless scraper.empty?
    puts "\nWebname results for '#{options[:user_id]}':"
    puts formatter.list(scraper)
  end

  exit
end

scraper_data = {}
options[:data_to_get].each do |data_type|
  if /(bookmark|like)e?d_(.*)/ =~ data_type
    method = $1 << 's'  # 'likes' or 'bookmarks'
    argument = $2.to_sym  # :tracks, :artists, :stations or :albums
    scraper_data[data_type] = scraper.public_send(method, argument)
  else
    scraper_data[data_type] = scraper.public_send(data_type)
  end
end

if options[:return_as_json]
  require 'json'
  write JSON.generate(scraper_data)
  exit
end

scraper_data.each do |key, value|
  # Capitalize each word in the key symbol.
  # e.g. :liked_tracks becomes 'Liked Tracks:'
  title = key.to_s.split('_').map(&:capitalize).join(' ') << ':'

  if value.empty?
    output = '  ** No Data **'
  else
    output = case key
             when /playing_station|recent_activity/
               formatter.list(value)
             when /liked_tracks|bookmarked_tracks/
               formatter.tracks(value)
             when /liked_artists|bookmarked_artists|stations|liked_stations/
               formatter.sort_list(value)
             when :liked_albums
               formatter.albums(value)
             when /following|followers/
               formatter.followx(value)
             end
  end

  write "#{ title }\n#{ output }"
end
